// PROG10_2.CPP - page flipping demo

// INCLUDES ///////////////////////////////////////////////
#define WIN32_LEAN_AND_MEAN  

#include <windows.h>   // include important windows stuff
#include <windowsx.h> 
#include <mmsystem.h>
#include <iostream.h> // include important C/C++ stuff
#include <conio.h>
#include <stdlib.h>
#include <malloc.h>
#include <memory.h>
#include <string.h>
#include <stdarg.h>
#include <stdio.h>
#include <math.h>
#include <io.h>
#include <fcntl.h>
//#include <stdafx.h>

#include <ddraw.h>		// directX includes
#include "resource.h"	// resource constants

// DEFINES ////////////////////////////////////////////////

// defines for windows 
#define WINDOW_CLASS_NAME "WINXCLASS"  // class name

#define  WINDOW_WIDTH   640             // size of window
#define  WINDOW_HEIGHT  480
#define  SCREEN_WIDTH   640             // size of screen
#define  SCREEN_HEIGHT  480
#define  SCREEN_BPP     8                // bits per pixel
#define  MIDX           SCREEN_WIDTH/2
#define  MIDY           SCREEN_HEIGHT/2

// MACROS /////////////////////////////////////////////////

// these read the keyboard asynchronously
#define KEY_DOWN(vk_code) ((GetAsyncKeyState(vk_code) & 0x8000) ? 1 : 0)
#define KEY_UP(vk_code)   ((GetAsyncKeyState(vk_code) & 0x8000) ? 0 : 1)

// TYPES //////////////////////////////////////////////////

typedef unsigned short USHORT;
typedef unsigned short WORD;
typedef unsigned char  UCHAR;
typedef unsigned char  BYTE;

// PROTOTYPES /////////////////////////////////////////////

int		Game_Init		( void *parms = NULL );
int		Game_Shutdown	( void *parms = NULL );
int		Game_Main		( void *parms = NULL );

byte	Mandlebrot(long double a, long double b, unsigned int n);
void	Gradient ( byte ri, byte gi, byte bi, byte rf, byte gf, byte bf, UINT start, UINT finish );

// GLOBALS ////////////////////////////////////////////////

HWND		main_window_handle = NULL;		// save the window handle
HINSTANCE	main_instance = NULL;			// save the instance
char		buffer[80];						// used to print text

LPDIRECTDRAW		lpdd         = NULL;	// dd object
LPDIRECTDRAWSURFACE	lpddsprimary = NULL;	// dd primary surface
LPDIRECTDRAWSURFACE	lpddsback    = NULL;	// dd back surface
LPDIRECTDRAWPALETTE	lpddpal      = NULL;	// a pointer to the created dd palette
DDSURFACEDESC		ddsd;					// a direct draw surface description struct
DDSCAPS				ddscaps;				// a direct draw surface capabilities struct
HRESULT				ddrval;					// result back from dd calls

UCHAR				*double_buffer	= NULL;	// the double buffer              
PALETTEENTRY		palette[256]	= {0};

// FUNCTIONS //////////////////////////////////////////////
LRESULT CALLBACK WindowProc ( HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam )
{
	// this is the main message handler of the system
	PAINTSTRUCT	ps;		   // used in WM_PAINT
	HDC			hdc;	   // handle to a device context

	// what is the message 
	switch ( msg )
	{	
		case WM_CREATE:
		{
			// do initialization stuff here
			return(0);
		} break;

		case WM_PAINT:
		{
			// start painting
			hdc = BeginPaint(hwnd,&ps);

			// end painting
			EndPaint(hwnd,&ps);
			return(0);
		} break;

		case WM_DESTROY:
		{
			// kill the application			
			PostQuitMessage(0);
			return(0);
		} break;

		default:
			break;

    } // end switch

	// process any messages that we didn't take care of 
	return ( DefWindowProc( hwnd, msg, wparam, lparam ) );

} // end WinProc

// WINMAIN ////////////////////////////////////////////////

int WINAPI WinMain(	HINSTANCE hinstance, HINSTANCE hprevinstance, LPSTR lpcmdline, int ncmdshow)
{

	bool		done = false;	// used in the while loop.  set to true if finished with program
	WNDCLASS	winclass;		// this will hold the class we create
	HWND		hwnd;			// generic window handle
	MSG			msg;			// generic message
	HDC			hdc;			// generic dc
	PAINTSTRUCT	ps;				// generic paintstruct

	// first fill in the window class stucture
	winclass.style			= CS_DBLCLKS | CS_OWNDC | CS_HREDRAW | CS_VREDRAW;
	winclass.lpfnWndProc	= WindowProc;
	winclass.cbClsExtra		= 0;
	winclass.cbWndExtra		= 0;
	winclass.hInstance		= hinstance;
	winclass.hIcon			= LoadIcon ( NULL, IDI_APPLICATION );
	winclass.hCursor		= LoadCursor ( NULL, IDC_ARROW );
	winclass.hbrBackground	= NULL;		//GetStockObject(BLACK_BRUSH);
	winclass.lpszMenuName	= NULL; //MAKEINTRESOURCE ( IDR_MENU1 );
	winclass.lpszClassName	= WINDOW_CLASS_NAME;

	// register the window class
	if (!RegisterClass(&winclass))
		return(0);

	// create the window, note the use of WS_POPUP
	if (!( hwnd = CreateWindow ( WINDOW_CLASS_NAME,		// class
							"WinX Game Console",		// title
							WS_POPUP | WS_VISIBLE,		// properties of the window
							0,0,						// x,y
							WINDOW_WIDTH, WINDOW_HEIGHT, // width, height
							NULL,		// handle to parent
							NULL,		// handle to menu
							hinstance,	// instance
							NULL)))		// creation parms
		return(0);

	// save the window handle and instance in a global
	main_window_handle = hwnd;
	main_instance      = hinstance;

	//	perform all game console specific initialization
	Game_Init();

	// enter main event loop
	while ( !done )
	{
		if ( PeekMessage ( &msg, NULL, 0, 0, PM_REMOVE ) )
		{ 
			// test if this is a quit
			if ( msg.message == WM_QUIT )
				done = true;
	
			// translate any accelerator keys
			TranslateMessage ( &msg );

			// send the message to the window proc
			DispatchMessage ( &msg );
		} // end if
    
		// main game processing goes here
		Game_Main();

	} // end while

	// shutdown game and release all resources
	Game_Shutdown();

	// return to Windows like this
	return msg.wParam;
} // end WinMain

// WINX GAME PROGRAMMING CONSOLE FUNCTIONS ////////////////

int Game_Init ( void *parms )
{
	// this function is where you do all the initialization for your game

	// create object and test for error
	if ( DirectDrawCreate ( NULL, &lpdd, NULL ) != DD_OK )
		return ( 0 );

	// set cooperation level to windowed mode normal
	if ( lpdd->SetCooperativeLevel ( main_window_handle,
		DDSCL_ALLOWMODEX |
		DDSCL_FULLSCREEN |
		DDSCL_EXCLUSIVE |
		DDSCL_ALLOWREBOOT
		) !=DD_OK )
	return 0;

	// set the display mode
	if ( lpdd->SetDisplayMode ( SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_BPP) !=DD_OK )
		return 0;

	// Create the primary surface
	memset ( &ddsd, 0, sizeof ( ddsd ) );
	ddsd.dwSize = sizeof ( ddsd );

	// set the flags to validate both the capabilities 
	// field and the backbuffer count field
	ddsd.dwFlags = DDSD_CAPS | DDSD_BACKBUFFERCOUNT;

	// we need to let dd know that we want a complex 
	// flippable surface structure, set flags for that
	ddsd.ddsCaps.dwCaps = DDSCAPS_PRIMARYSURFACE | DDSCAPS_FLIP | DDSCAPS_COMPLEX;

	// set the backbuffer count to 1
	ddsd.dwBackBufferCount = 1;

	// create the primary surface
	lpdd->CreateSurface ( &ddsd, &lpddsprimary, NULL );

	// query for the backbuffer or secondary surface
	// notice the use of ddscaps to indicate what 
	// we are requesting
	ddscaps.dwCaps = DDSCAPS_BACKBUFFER;

	// get the surface
	lpddsprimary->GetAttachedSurface ( &ddscaps, &lpddsback );

	// allocate memory for the double buffer
	double_buffer = new UCHAR [SCREEN_WIDTH * SCREEN_HEIGHT];
	if ( !double_buffer )
		return(0);

	Gradient ( 0x00, 0x00, 0xff,	0xff, 0xff, 0x00,	0, 63 );
	Gradient ( 0xff, 0xff, 0x00,	0xff, 0x8f, 0x00,	64, 127 );
	Gradient ( 0xff, 0x8f, 0x00,	0xff, 0x00, 0x00,	128, 191 );
	Gradient ( 0xff, 0x00, 0x00,	0x00, 0x00, 0x00,	192, 255 );

	// return success
	return 1;

} // end Game_Init

///////////////////////////////////////////////////////////

int Game_Shutdown(void *parms)
{
	// this function is where you shutdown your game and
	// release all resources that you allocated

	// first release the secondary surface
	if ( lpddsback )
		lpddsback->Release();
       
	// now release the primary surface
	if ( lpddsprimary )
		lpddsprimary->Release();
       
	// release the directdraw object
	if ( lpdd )
		lpdd->Release();

	// free double buffer
	if ( double_buffer )
		delete [] double_buffer;

	// return success
	return 1;
} // end Game_Shutdown

///////////////////////////////////////////////////////////

int Game_Main ( void *parms )
{
	// this is the workhorse of your game it will be called continuously in real-time this is like main() in C
	// all the calls for you game go here!

	UCHAR	*	back_buffer = NULL, // used to draw
			*	dest_ptr    = NULL, // used in line by line copy
			*	src_ptr     = NULL; // " "

#define VK_A   0x41
#define VK_B   0x42
#define VK_C   0x43
#define VK_D   0x44
#define VK_E   0x45
#define VK_F   0x46
#define VK_G   0x47
#define VK_H   0x48
#define VK_I   0x49
#define VK_J   0x4a
#define VK_K   0x4b
#define VK_L   0x4c
#define VK_M   0x4d
#define VK_N   0x4e
#define VK_O   0x4f
#define VK_P   0x50
#define VK_Q   0x51
#define VK_R   0x52
#define VK_S   0x53
#define VK_T   0x54
#define VK_U   0x55
#define VK_V   0x56
#define VK_W   0x57
#define VK_X   0x58
#define VK_Y   0x59
#define VK_Z   0x5a

	static byte color, numits;
	static double ai = -2.3899986744f;
	static double bi = -1.9699978828f;
	static double ainc = 0.0093750004f;
	static double binc = 0.0083333347f;


//	static double	ai = -1.7499999993f;
//	static double	bi = 0.0000000007f;
//	static double	ainc = 0.0000000001f;
//	static double	binc = 0.0000000001f;

//	static double	ai = -1.7499999993f;
//	static double	bi = 0.0000000007f;
//	static double	ainc = 0.0000100002f;
//	static double	binc = 0.0000099997f;

	static double	zoom	= 1;
	static bool		update	= true;
	static byte		grad	= 16;

	// check of user is trying to exit
	if ( KEY_DOWN ( VK_ESCAPE ) )
		PostMessage ( main_window_handle, WM_DESTROY, 0, 0 );

	if ( KEY_DOWN ( VK_UP ) )
	{
		bi += 0.05f;
		update = true;
	}
	if ( KEY_DOWN ( VK_DOWN ) )
	{
		bi -= 0.05f;
		update = true;
	}
	if ( KEY_DOWN ( VK_LEFT ) )
	{
		ai += 0.05f;
		update = true;
	}
	if ( KEY_DOWN ( VK_RIGHT ) )
	{
		ai -= 0.05f;
		update = true;
	}
	if ( KEY_DOWN ( VK_W ) )
	{
		binc+= 0.0001666666f;
		update = true;
	}
	if ( KEY_DOWN ( VK_S ) )
	{
		binc-= 0.0001666666f;
		update = true;
	}
	if ( KEY_DOWN ( VK_A ) )
	{
		ainc-= 0.0001250000f;
		update = true;
	}
	if ( KEY_DOWN ( VK_D ) )
	{
		ainc+= 0.0001250000f;
		update = true;
	}
	if ( KEY_DOWN ( VK_PRIOR ) )
	{
		grad++;
		update = true;
	}
	if ( KEY_DOWN ( VK_NEXT ) )
	{
		grad--;
		update = true;
	}
	if ( KEY_DOWN ( VK_SPACE ) )
		update = true;
	if ( KEY_DOWN ( VK_N ) )
	{
		FILE *fp;
		fp = fopen("mandvals.txt", "w");
		fprintf(fp,
			"\tstatic double\tai = %6.10ff;\n"
			"\tstatic double\tbi = %6.10ff;\n"
			"\tstatic double\tainc = %6.10ff;\n"
			"\tstatic double\tbinc = %6.10ff;\n",
			ai, bi, ainc, binc);
		fclose(fp);
	}

	if ( update )
	{
		// erase secondary back buffer
		memset ( &ddsd, 0, sizeof(ddsd) );
		ddsd.dwSize = sizeof(ddsd);

		// lock the secondary surface
		lpddsback->Lock ( NULL, &ddsd, DDLOCK_SURFACEMEMORYPTR | DDLOCK_WAIT,NULL );

		// get video pointer to secondary surface
		back_buffer = (UCHAR *)ddsd.lpSurface;

		// clear back buffer out

		// linear memory
		if ( ddsd.lPitch == SCREEN_WIDTH )
			memset ( back_buffer, 0, SCREEN_WIDTH * SCREEN_HEIGHT );
		// non-linear memory
		else
		{
			// make copy of video pointer
			dest_ptr = back_buffer;
			// clear out memory one line at a time
			for ( int y = 0; y < SCREEN_HEIGHT; ++y)
			{
				// clear next line
				memset ( dest_ptr, 0, SCREEN_WIDTH );
				// advance pointer to next line
				dest_ptr += ddsd.lPitch;
			} // end for y
		} // end else

		// perform game logic...
       
		// draw the next frame into the secondary back buffer

		static double a, b = bi;

		for ( unsigned int screeny = 0; screeny < WINDOW_HEIGHT; ++screeny )
		{
			a = ai;
			for ( unsigned int screenx = 0; screenx < WINDOW_WIDTH; ++screenx )
			{
				color = Mandlebrot ( a, b, grad );
				back_buffer [ screenx + screeny * WINDOW_WIDTH ] = color;
				a += ainc;
			} // for
			b += binc;
		} // for
		update = false;

		// unlock secondary buffer
		lpddsback->Unlock ( back_buffer );

		// flip pages
		while ( lpddsprimary->Flip ( NULL, DDFLIP_WAIT ) != DD_OK );

	} // if ( update )

//	if ( updatetext )
	{
		HDC hDC = GetDC ( main_window_handle );
		while ( !hDC )
			GetDC ( main_window_handle );

		static char s[1024];
		sprintf ( s, "ai = %lf", ai );
		TextOut	( hDC, 0, 0, s, strlen(s) );
		sprintf ( s, "bi = %lf", bi );
		TextOut	( hDC, 0, 20, s, strlen(s) );
		sprintf ( s, "ainc = %lf", ainc );
		TextOut	( hDC, 0, 40, s, strlen(s) );
		sprintf ( s, "binc = %lf", binc );
		TextOut	( hDC, 0, 60, s, strlen(s) );
		sprintf ( s, "iterations = %d", grad );
		TextOut ( hDC, 0, 80, s, strlen(s) );

		ReleaseDC ( main_window_handle, hDC );
	} // if ( updatetext )

	// return success
	return 1;
} // end Game_Main

///////////////////////////////////////////////////////////
//
// Mandlebrot
/*
z(n+1) = z(n)^2 + c
x(n+1) = x(n)^2 - y(n)^2 + a
y(n+1) = 2*x(n)*y(n) + b
*/
byte Mandlebrot ( long double a, long double b, unsigned int n )
{
	long double z, xtemp, ytemp, x = 0, y = 0;
	unsigned int count = 0;
	n %= 256;

	for ( ; ( count < n ); ++count )
	{
		xtemp = x*x - y*y + a;
		ytemp = 2*x*y + b;

		z = xtemp*xtemp + ytemp*ytemp;
		if ( z >= 4 )
			break;
		x = xtemp;
		y = ytemp;
	}
	return count;
}

void	Gradient ( byte ri, byte gi, byte bi, byte rf, byte gf, byte bf, UINT start, UINT finish )
{
	WORD	a;
	double	rinc, ginc, binc;
	double	r = 0, g = 0, b = 0;
	byte	R, G, B;

	rinc = (double)(rf-ri)/abs(finish - start + 1);
	ginc = (double)(gf-gi)/abs(finish - start + 1);
	binc = (double)(bf-bi)/abs(finish - start + 1);

	R = ri;
	G = gi;
	B = bi;
	for ( a = start; a <= finish; ++a )
	{
		r += rinc;
		g += ginc;
		b += binc;
		R = ri + (byte)r;
		G = gi + (byte)g;
		B = bi + (byte)b;
		palette[a].peRed	= R;
		palette[a].peGreen	= G;
		palette[a].peBlue	= B;
		palette[a].peFlags	= PC_NOCOLLAPSE;
	}
	lpdd->CreatePalette ( DDPCAPS_8BIT | DDPCAPS_INITIALIZE | DDPCAPS_ALLOW256, palette, &lpddpal, NULL );
	lpddsprimary->SetPalette ( lpddpal );
}
